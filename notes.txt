--> Anguter :- it is an open source , cross platform , javascript framework which is used to develop ui (called a user interface) (frontend)
--> open source : free available 
--> cross platform : perform and working on any platform , linux , window or mac etc.
it is a javascript framework 
--> framework :- framework is basically combination of multiple library, classes and runtime envoirment. so basically framework is the combination of multiple functionality 
and advantage of these funvctionality are basically iwth the help of it we can develop our programm very easily and fastly.

--> in starting aroun 2012 anguler known as anguler js (anguler 1)
     --> we can write all the code in vanilla javascript(pure javascript code)
--> but in 2016 , it introduced anguler 2 (from there it is known as anguler only )
     --> write code in typescript (typescript is the superset of javascript) (type script support data type feature so the javascript is loosly type language 
     we cannot define data type in javascript , but with the help of typescript we can define data type and we can use interfaces generic classess , generic function)
     --> 2 to 19 version 
     --> in anguler js :- controller base approach 
     --> but in anguler :- component based approach 

-> prerequisits for anguler:
     -> typescript 
     -> software 
        -> Node js >= 20 version 
        -> vscode 


--> typescript :- typescript is the superset of javascript ,it builds on top of javascript , javascript code is executed through the browser 
in every of the browser there is javascript engine and that engine is compile the javascript code and give us the output that is the internal process.
but browser does not understand typescript , so we need to convert that typescript into javascript then that javascript run into browser
these are the thing that you shoud or must aware of this 
typescript give us platform to write some advance code and that code is covert into javascript then that code just linked with our application.
first we write a typescript code , then we compile the typescript code into plain javascript code (vanilaa javascript code) the old javascript not in es6 javascript 
using a typescript compiler (tsc).
  --> typescript :- .ts

  eg:  typescript ---.  typescript compiler  ---->  javascript 
  ---> it uses the javascript syntex guys and add additoinal features like support data types oops feature like getter setter , abstract, interfaces 
  generics .
  -- > javascript is loosly typed language while type script is strongly typed language 
--> install type script :
   npm install typescript --g (g means globaly)


--> how we run typescript program 
   --> open folder in cmd or terminal 
   --> tsc first.ts
   --> node first.js
   -->       the sum is 9 

--> typescript datatypes:-
     --> it used type annotation to specify explicit type for identifiers such as for variables , functions , objects etc.

     syntex:---  type after an identifier
     eg:
     let variablename : type = value;
     const constantname :type = value;
     eg:
     let arrayName :type[];
     eg:
      let person :{
          name:type,
          age;type
      }

--> types in typescript :-
-> Number 
  let age:number;
-> String  
let name:string;
-> Boolean
let status:boolean;
-> Object 
let employee:object;
-> array
let employeename:string[]=[];
-> Tuples
let empdata: [string,number,string]=("anuj",23,"noida")
--> enum, unknown , any, void, never, union.

--> condition (same like javascript)
--> loops
--> array
--> function
oops (object oriented programming)
--> class, object , constructor 
--> class: it is a container where we can store multiple data like variable , functions and its properties .
-->  object : instance of cllass , with the help of it we can access the properties of a class .
--> constructor : it is used to initialize data when object is created it means it called automatically.
-> we want to create a car class where default speed of car is 50km/h , when we call accellator the speed is increased by 70

-->   Access modifier :- it change the visibility of the properties and method of the class 
    -> private :- accessible with in the class 
    -> protected :- within the class and its derived class
    -> public :- public means accessible anywhere 


--> getter and setter :  it allow control access to the properties of class , get and set keywords are used to define,, it define as a method but call as a properties
the getter method return the value of the property(accessor)
the setter method update the properties value (mutator)
class person{
     fullName:string;
     constructor(private firstName:string,private lastName:string){
          this.fullName=`${firstName}${lastName}`

     }
     get empName():string{
          return this.fullName;
     }
     set empName(newName:string){
          this.fullName=newName;
     }
}
const obj=new person("sumit","joshi");
console.log(obj.empName);//getter
obj.empName="anurag singh";
console.log(obj.empName);

--> ** inheritence : the class reuse the property and method of another class that is known as the inheritence .
the class which inherit the properties and method is called child class (derived class)
the class whose properties or methods are inherited is called super class or parent class
   to inherit the class we use the extends keyword same as javascript
** to call a constructor of a parent class in the constructor of child class we can use the super() method.